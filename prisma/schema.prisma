generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Descendant {
  id                   Int               @id @default(autoincrement())
  updatedAt            DateTime          @default(now())
  descendant_id        String            @unique
  descendant_name      String
  descendant_group_id  String
  descendant_image_url String
  descendant_stats     DescendantStat[]
  descendant_skill     DescendantSkill[]
}

model DescendantSkill {
  id                Int         @id @default(autoincrement())
  skill_type        String
  skill_name        String
  element_type      String
  arche_type        String?
  skill_image_url   String
  skill_description String
  descendantId      Int?
  Descendant        Descendant? @relation(fields: [descendantId], references: [id])
}

model DescendantStat {
  id           Int          @id @default(autoincrement())
  level        Int
  descendantId Int?
  Descendant   Descendant?  @relation(fields: [descendantId], references: [id])
  stat_detail  StatDetail[]
}

model StatDetail {
  id                Int             @id @default(autoincrement())
  stat_id           String
  descendant_statId Int?
  stat_value        Float
  descendant_stat   DescendantStat? @relation(fields: [descendant_statId], references: [id])
}

model Stats {
  id            Int    @id @default(autoincrement())
  stat_id       String @unique
  stat_name     String
  stat_order_no Int
}

model Weapon {
  id                              Int              @id @default(autoincrement())
  weapon_name                     String
  weapon_id                       String           @unique
  image_url                       String
  weapon_type                     String
  weapon_type_id                  String
  weapon_rounds_type              String
  available_core_slots            String
  base_stat                       WeaponBaseStat[]
  firearm_atk                     FirearmAtk[]
  weapon_perk_ability_name        String?
  weapon_perk_ability_description String?
  weapon_perk_ability_image_url   String?
}

model WeaponBaseStat {
  id         Int     @id @default(autoincrement())
  stat_id    String
  stat_value Float
  Weapon     Weapon? @relation(fields: [weaponId], references: [id])
  weaponId   Int?
}

model FirearmAtk {
  id       Int              @id @default(autoincrement())
  level    Int
  firearm  FirearmAtkType[]
  Weapon   Weapon?          @relation(fields: [weaponId], references: [id])
  weaponId Int?
}

model FirearmAtkType {
  id                Int         @id @default(autoincrement())
  firearm_atk_type  String
  firearm_atk_value Float
  FirearmAtk        FirearmAtk? @relation(fields: [firearmAtkId], references: [id])
  firearmAtkId      Int?
}

model Module {
  id                         Int          @id @default(autoincrement())
  module_name                String
  module_id                  String       @unique
  image_url                  String
  module_type                String
  module_tier_id             String
  module_socket_type         String
  module_class               String
  available_weapon_type      String[]
  available_descendant_id    String[]
  available_module_slot_type String[]
  module_stat                ModuleStat[]
}

model ModuleStat {
  id              Int     @id @default(autoincrement())
  level           Int
  module_capacity Int
  value           String
  Module          Module? @relation(fields: [moduleId], references: [id])
  moduleId        Int?
}

model Reactor {
  id                  Int                 @id @default(autoincrement())
  reactor_id          String              @unique
  reactor_name        String
  image_url           String
  reactor_tier_id     String
  reactor_skill_power ReactorSkillPower[]
}

model ReactorSkillPower {
  id                       Int                            @id @default(autoincrement())
  level                    Int
  skill_atk_power          Float
  sub_skill_atk_power      Float
  skill_power_coefficient  ReactorSkillPowerCoefficient[]
  enchant_effect           ReactorEnchantEffect[]
  optimized_condition_type String
  Reactor                  Reactor?                       @relation(fields: [reactorId], references: [id])
  reactorId                Int?
}

model ReactorSkillPowerCoefficient {
  id                     Int                @id @default(autoincrement())
  coefficient_stat_id    String             @unique
  coefficient_stat_value Float
  ReactorSkillPower      ReactorSkillPower? @relation(fields: [reactorSkillPowerId], references: [id])
  reactorSkillPowerId    Int?
}

model ReactorEnchantEffect {
  id                  Int                @id @default(autoincrement())
  enchant_level       Int
  stat_id             String
  value               Float
  ReactorSkillPower   ReactorSkillPower? @relation(fields: [reactorSkillPowerId], references: [id])
  reactorSkillPowerId Int?
}

model ExternalComponent {
  id                                Int                                @id @default(autoincrement())
  external_component_id             String                             @unique
  external_component_name           String
  image_url                         String
  external_component_equipment_type String
  external_component_tier_id        String
  base_stat                         ExternalComponentBaseStat[]
  set_option_detail                 ExternalComponentSetOptionDetail[]
}

model ExternalComponentBaseStat {
  id                  Int                @id @default(autoincrement())
  level               Int
  stat_id             String
  stat_value          Float
  ExternalComponent   ExternalComponent? @relation(fields: [externalComponentId], references: [id])
  externalComponentId Int?
}

model ExternalComponentSetOptionDetail {
  id                  Int                @id @default(autoincrement())
  set_option          String
  set_count           Int
  set_option_effect   String
  ExternalComponent   ExternalComponent? @relation(fields: [externalComponentId], references: [id])
  externalComponentId Int?
}
